# The domain of your ogp site.  This value is used for CORS and other
# security measures
#localhost is just a placeholder; you need to put in the actual domain
ogp.domain=http://localhost:8080

# if you have css and js files to localize your ogp site, you can reference
# them here
#example:
#ogp.cssLocalized=resources/css/localizeTufts.css
ogp.cssLocalized=
ogp.jsLocalized=

# default is OpenGeoportal
#primary is the main text color (default black) and offset will have the css class offsetColor
ogp.pageTitle.primary=
ogp.pageTitle.offset=

# comma separated list of repository ids (see repositories.properties)
# that will appear in the repositories drop down 
# and will be queried by solr 
# you can specify "all" for defaultSelected or particular repository ids
ogp.repositories=tufts,harvard,berkeley,mit,massgis
ogp.repositories.defaultSelected=all

# to use google analytics and link shortener and geocoder, you need
# your own api keys
apikey.analytics=
apikey.google=


# the url given to the web browser so that it can query solr directly
# if .internal is blank the external value will be used internally as well
# By default, this value will point to the OGP community production solr instance
# .external needs to be a web accessible url
# note: currently ogp will use only /select and /terms
solr.url.internal=https://geodata.tufts.edu/solr
#solr.url.internal=http://data.opengeoportal.org/solr/ogp

# this value is ignored if 'solr.proxy.enabled' is set to 'true'. Should prefer solr.proxy.enabled.
# solr.url.external=http://data.opengeoportal.org/solr/ogp

# whether or not to proxy the solr instance at solr.url.internal (boolean)
# if true, the client will use solr.proxy.path instead of the value at solr.url.external
solr.proxy.enabled=true
# the relative path for the solr proxy. Leading slash is required.
solr.proxy.path=/solr

# if you are using ogp to proxy download and preview of layers, set it
# up here.  (form is: proxy.${repository id}.*)
proxy.tufts.accessLevel=restricted

#specifying "geoserver" expands to wms, wfs, and wcs endpoint mappings
#this is just a placeholder.. input the ip address of the map server to proxy
#in the example case:
#Ex:
#	proxy.tufts.geoserver.internal=http://127.0.0.1:8580
#	proxy.tufts.geoserver.external=restricted
# 
# the path /restricted/wms maps to http://127.0.0.1:8580/wms , etc.

proxy.tufts.geoserver.internal=http://localhost:8080/geoserver
proxy.tufts.geoserver.external=restricted
proxy.tufts.geoserver.username=dummy_user
proxy.tufts.geoserver.password=dummy_password

# this should eventually go in an auth module, I think.
login.repository=disable
#'form' or 'iframe'
login.type=form
#'login' for local form (ldap or default username and password)
#'weblogin' for noop iframe login (external web form auth with no deep Spring Security integration)
#'restricted/weblogin' for iframe login (external web form auth with deep Spring Security integration [CAS, potentially Shib])
login.url=login
# this should just be the https version of the domain OGP is running on.
login.secureDomain=https://localhost:8443
#if you're using the nop iframe login, you'll need to uncomment these values and insert appropriate values (you can just use the ones in
#the default authenticationManager (see security-app-context.xml)
#login.nop.user=
#login.nop.password=

# every ${cleanupInterval} milliseconds, files older than ${maxFileAge} minutes are
# deleted from the download folder java.temp/${ogp.downloadDir}
ogp.downloadDir=ogpdownload
styleSheet.fgdc=WEB-INF/xml/xml2html/fgdc/fgdc2html.xsl
styleSheet.iso19139=WEB-INF/xml/xml2html/iso19139/iso2html.xsl
metadata.css=/resources/css/metadata.css

cleanupInterval=30000
maxFileAge=240

# maximum memory for the initial ImageBuffer in the ImageCompositor in MB's
# this will be an uncompressed array of ints representing pixels.  To composite,
# the compositor will need about twice this amount of heap space.
# 20 MB roughly equates to an image of 2289 pixels sq.
maxImageSize=20

threadPool.executor=5-10
threadPool.scheduler=1

connectionPool.maxTotal=100
connectionPool.maxPerRoute=10




